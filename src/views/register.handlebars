{{#section "styles"}}
  <link rel="stylesheet" href="/css/register.css" />
{{/section}}

{{#section "scripts"}}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('register-form');
    const passwordInput = document.getElementById('password');
    const passwordConfirmInput = document.getElementById('password-confirm');
    const passwordFeedback = document.getElementById('password-feedback');
    const notificationArea = document.getElementById('notification-area');
    
    function validatePassword() {
      const password = passwordInput.value;
      let isValid = true;
      let feedback = '';
      
      if (password.length < 8 || password.length > 25) {
        feedback += '• Password must be 8-25 characters<br>';
        isValid = false;
      }
      
      if (!/[A-Z]/.test(password)) {
        feedback += '• Must contain at least one uppercase letter<br>';
        isValid = false;
      }
      
      if (!/[a-z]/.test(password)) {
        feedback += '• Must contain at least one lowercase letter<br>';
        isValid = false;
      }
      
      if (!/[0-9]/.test(password)) {
        feedback += '• Must contain at least one digit<br>';
        isValid = false;
      }
      
      if (!/[!@#$%^&*]/.test(password)) {
        feedback += '• Must contain at least one special character (!@#$%^&*)<br>';
        isValid = false;
      }
      
      passwordFeedback.innerHTML = feedback;
      return isValid;
    }
    
    function checkPasswordsMatch() {
      if (passwordInput.value !== passwordConfirmInput.value) {
        passwordConfirmInput.setCustomValidity("Passwords don't match");
      } else {
        passwordConfirmInput.setCustomValidity('');
      }
    }
    
    passwordInput.addEventListener('input', validatePassword);
    passwordConfirmInput.addEventListener('input', checkPasswordsMatch);
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validatePassword()) {
        return;
      }
      
      if (passwordInput.value !== passwordConfirmInput.value) {
        alert("Passwords don't match");
        return;
      }
      
      const userData = {
        email: document.getElementById('email').value,
        password: passwordInput.value,
        firstname: document.getElementById('firstname').value,
        lastname: document.getElementById('lastname').value,
        city: document.getElementById('city').value,
        street: document.getElementById('street').value,
        housenumber: document.getElementById('housenumber').value,
        zipcode: document.getElementById('zipcode').value,
        telephone: document.getElementById('telephone').value,
        isAdmin: true
      };

      
      try {
        // Show loading message
        displayNotification('Processing registration...', 'loading');
        
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData),
        });
        
        const data = await response.json();
        
        // Check for errors
        if (!response.ok) {
         // check for already registered users
          if (response.status === 409) {
            displayNotification(`Registration failed: ${data.message || 'Email is already registered'}`, 'error');
          } else if (data.data && data.data.errors) {
            const errorMessages = Array.isArray(data.data.errors) 
              ? data.data.errors.map(err => Array.isArray(err) ? `${err[0]}: ${err[1]}` : err).join('<br>')
              : data.data.errors.join('<br>');
            displayNotification(`Registration failed:<br>${errorMessages}`, 'error');
          } else {
            displayNotification(`Registration failed: ${data.message || 'Please try again'}`, 'error');
          }
          return;
        }
        
        const token = data.data.token;
        if (token) {
          document.cookie = `token=${token}; path=/; expires=${new Date(Date.now() + 1000 * 60 * 60 * 24).toUTCString()}`;
        }
        
        // Clear the form
        form.reset();
        
        // Display success message with verification email notification
        displayNotification(`
          <h3>Registration Successful!</h3>
          <p>A verification email has been sent to <strong>${userData.email}</strong>.</p>
          <p>Please check your inbox and follow the verification link to activate your account.</p>
          <p>You will be redirected to the login page in 5 seconds...</p>
        `, 'success');
        
        // Redirect after 5 seconds
        setTimeout(() => {
          window.location.href = '/items  ';
        }, 5000);
      } catch (error) {
        displayNotification('Registration error: ' + error, 'error');
      }
    });
    
    // Function to display notifications
    function displayNotification(message, type) {
      if (!notificationArea) return;
      
      notificationArea.innerHTML = message;
      notificationArea.className = 'notification ' + type;
      notificationArea.style.display = 'block';
      
      if (type === 'error' || type === 'loading') {
        window.scrollTo({top: 0, behavior: 'smooth'});
      }
    }
  });
</script>
{{/section}}

<div class="register-container">
  <h1>Register Admin User</h1>
  
  <!-- Add notification area -->
  <div id="notification-area" class="notification" style="display: none;"></div>
  
  <form id="register-form">
    <div class="form-group">
      <label for="email" class="form-label">Email:</label>
      <input type="email" id="email" name="email" required class="form-input" />
    </div>
    
    <div class="form-group">
      <label for="firstname" class="form-label">First Name:</label>
      <input type="text" id="firstname" name="firstname" required class="form-input" />
    </div>
    
    <div class="form-group">
      <label for="lastname" class="form-label">Last Name:</label>
      <input type="text" id="lastname" name="lastname" required class="form-input" />
    </div>
    
    <div class="form-row">
      <div class="form-group">
        <label for="street" class="form-label">Street:</label>
        <input type="text" id="street" name="street" required class="form-input" />
      </div>
      
      <div class="form-group">
        <label for="housenumber" class="form-label">House Number:</label>
        <input type="text" id="housenumber" name="housenumber" required class="form-input" />
      </div>
    </div>
    
    <div class="form-row">
      <div class="form-group">
        <label for="city" class="form-label">City:</label>
        <input type="text" id="city" name="city" required class="form-input" />
      </div>
      
      <div class="form-group">
        <label for="zipcode" class="form-label">Zip Code:</label>
        <input type="text" id="zipcode" name="zipcode" required class="form-input" />
      </div>
    </div>
    
    <div class="form-group">
      <label for="telephone" class="form-label">Telephone:</label>
      <input type="tel" id="telephone" name="telephone" required class="form-input" />
    </div>
    
    <div class="form-group">
      <label for="password" class="form-label">Password:</label>
      <input type="password" id="password" name="password" required class="form-input" />
      <div id="password-feedback" class="form-feedback"></div>
    </div>
    
    <div class="form-group">
      <label for="password-confirm" class="form-label">Confirm Password:</label>
      <input type="password" id="password-confirm" name="password-confirm" required class="form-input" />
    </div>
    
    <div class="admin-notice">
      <p><strong>Note:</strong> This user will be registered with administrative privileges.</p>
    </div>
    
    <button type="submit" class="submit-btn">Register Admin</button>
  </form>
</div>